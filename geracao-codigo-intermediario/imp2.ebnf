@@grammar::IMP
@@eol_comments :: /##.*?$/
@@keyword :: 'and'
@@keyword :: 'not'
@@keyword :: 'or'
@@keyword :: 'True'
@@keyword :: 'False'
@@keyword :: '+'
@@keyword :: '-'
@@keyword :: '(' ')'
@@keyword :: '=='
@@keyword :: '<'
@@keyword :: '<='
@@keyword :: '>'
@@keyword :: '>='
@@keyword :: ':='
@@keyword :: 'while' 
@@keyword :: 'if' 'then' 'else' 
@@keyword :: 'var' '='
@@keyword :: 'const' '='
@@keyword :: ';'
@@keyword :: 'skip'
@@keyword :: '{' '}'
@@keyword :: 'print'

start = [ds:decSeq] [cs:cmd_seq] $ ;
exp =  bin_exp | array_index | append | paren_exp | un_exp | array_int | @:atom ;

array_int = "[" ','%{ e:exp }* "]" ;

array_index = idn:identifier"["e:exp"]" ;

array_assign = idn:identifier"["idx:exp"]" op:":=" e:exp ;

append = l1:exp "++" l2:exp ;

paren_exp = "(" e:exp ")" ;

bin_exp = l:array_int op:binop e:exp | e1:exp op:binop e2:exp ;

un_exp = op:"#"  e:exp  | op:"not" e:exp ;

atom = @:num_atom  | @:truth_atom | @:id_atom ;

num_atom = number ;

truth_atom = truth ;

id_atom = identifier ;

binop =  "and"| "or" | "==" | "<=" | ">=" | "<" | ">"  | "%" |"+" | "-" | "*" | "/"  ;

truth = 'True' | 'False' ;

## This makes sure that an identifier does not match a keyword.
@name
identifier = /(?!\d)\w+/ ;

number = /\d+/ ;

blk = "{" ds:decSeq cs:cmd_seq "}" ;

cmd_seq = ";"%{ac:atom_cmd}+ ;

atom_cmd = cond | loop | array_assign | assign | print | call | skip ;

skip = "skip" ;

assign = idn:identifier op:":=" e:exp ;

print = op:"print" e:exp ;

cond = op:"if" t:paren_exp b1:blk ["else" b2:blk] ; 

loop = op:"while" t:paren_exp b:blk ;

dec = fn | rec | var | const ;

decSeq = { d:dec }* ;

var = op:"var" ","%{ idn:identifier "=" e:exp }+ ";" ;

const = op:"const" idn:identifier "=" e:exp ";" ;

fn = op:"def" idn:identifier '(' f:formal ')' b:blk ;

rec = op:"rec" idn:identifier '(' f:formal ')' b:blk ;

formal = ','%{ identifier }* ;

call = idn:identifier '(' a:actual ')' ;

actual = ','%{ exp }* ;



